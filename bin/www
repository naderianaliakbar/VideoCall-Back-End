#!/usr/bin/env node
// init app and requirement
let app            = require('../app');
let debug          = require('debug')('exoroya-backend:server');
let http           = require('http');
let db             = require('../modules/db');
let websocket      = require('../modules/websocket');
let port           = normalizePort(process.env.PORT || '5000');
const jwt          = require("jsonwebtoken");
const {PeerServer} = require("peer");

// set port
app.set('port', port);

// create server
let server = http.createServer(app);

// connect to db
db.connect(function (err, client) {
    if (err) console.log(err);
});

// create socket server
websocket.createServer(server);

// create peer server
const peerServer = PeerServer({port: 9000});
peerServer.on('connection', client => {
    jwt.verify(client.token, process.env.TOKEN_SECRET, (err, user) => {
        if (err) client.socket.close();
    });
})

// listen server
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//Normalize a port into a number, string, or false.
function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
               ? 'Pipe ' + port
               : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

// Event listener for HTTP server "listening" event.
function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
               ? 'pipe ' + addr
               : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
